/*
 * Copyright (c) Giorgio Vinciguerra 5/2016.
 */

package server.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import server.Server;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;

public class MainForm {
    private Server server;
    private JPanel panel1;
    private JButton startButton;
    private JTextArea textArea;
    private JButton stopButton;

    public void appendToTextArea(String s) {
        if (SwingUtilities.isEventDispatchThread())
            textArea.append(s);
        else
            try {
                SwingUtilities.invokeAndWait(() -> textArea.append(s));
            } catch (Exception e) {

            }
    }

    public MainForm() {
        // Dirotta lo stdout e stderr sulla textarea
        OutputStream out = new OutputStream() {
            @Override
            public void write(final int b) throws IOException {
                appendToTextArea(String.valueOf(b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                appendToTextArea(new String(b, off, len, StandardCharsets.UTF_8));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        PrintStream ps = new PrintStream(out, true);
        server = new Server(ps, true);
        System.setErr(ps);
        System.setOut(ps);

        // Action listeners

        startButton.addActionListener(a -> {
            startButton.setEnabled(false);
            stopButton.setEnabled(true);
            new Thread() {
                @Override
                public void run() {
                    try {
                        server.startServer();
                    } catch (Exception e) {
                        System.out.println("[ERROR] " + e.getMessage());
                        SwingUtilities.invokeLater(() -> {
                            startButton.setEnabled(true);
                            stopButton.setEnabled(false);
                        });
                    }
                }
            }.start();
        });

        stopButton.addActionListener(a -> {
            int result = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                try {
                    startButton.setEnabled(true);
                    stopButton.setEnabled(false);
                    server.close();
                } catch (Exception e) {
                    System.out.println("[ERROR] " + e.getMessage());
                }
            }
        });
    }

    public static void main(String[] args) {
        System.setProperty("java.net.preferIPv4Stack", "true");
        JFrame frame = new JFrame("Server");
        frame.setMinimumSize(new Dimension(400, 300));
        frame.setContentPane(new MainForm().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your
     * code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), -1, -1));
        startButton = new JButton();
        startButton.setText("Start");
        panel1.add(startButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setEnabled(false);
        stopButton.setForeground(new Color(-4506327));
        stopButton.setText("Stop");
        panel1.add(stopButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(400, 247), null, null, 0, false));
        textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setFocusable(false);
        textArea.setFont(new Font("Courier New", textArea.getFont().getStyle(), 12));
        textArea.setLineWrap(true);
        textArea.setOpaque(false);
        scrollPane1.setViewportView(textArea);
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
